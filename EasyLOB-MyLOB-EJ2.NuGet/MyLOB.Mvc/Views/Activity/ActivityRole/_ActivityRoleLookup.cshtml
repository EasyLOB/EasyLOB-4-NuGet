@model LookupModel

@{
    string CSHTML = "_ActivityRoleLookup.cshtml";

    IZProfile profile = DataHelper.GetProfile(typeof(ActivityRole));

    string query = string.IsNullOrEmpty(Model.Query) ? "null" : Model.Query;

    List<object> toolbar = new List<object>();
    toolbar.Add(new { id = Model.ValueId + "_LookupGrid_Refresh", text = "", tooltipText = PresentationResources.Refresh, prefixIcon = "e-easylob-refresh" });
}

<div class="@AppDefaults.CSSClassLookup">
    <span class="input-group-prepend z-lookupButton">
        <span class="input-group-text">
            <img id="@(Model.ValueId)_LookupButton" class="btn z-buttonLookup" />
        </span>
    </span>
    @Html.TextBox(Model.ValueId + "_LookupText", Model.Text, new { @class = profile.EditCSSLookupEditor(Model.Required) })
</div>

<div id="@(Model.ValueId)_LookupModal" aria-labelledby="@(Model.ValueId)_LookupLabel" class="modal fade" data-backdrop="false" role="dialog" tabindex="-1">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">

                <h4 id="@(Model.ValueId)_LookupLabel" class="modal-title">@ActivityRoleResources.EntityPlural</h4>
                <button aria-label="@PresentationResources.Cancel" class="close" data-dismiss="modal" type="button"><span aria-hidden="true">&times;</span></button>

            </div>
            <div class="modal-body">

                @(Html.EJS().Grid(Model.ValueId + "_LookupGrid")
                    .AllowFiltering()
                    .AllowPaging()
                    .AllowReordering()
                    .AllowResizing()
                    .AllowSorting()
                    .AllowTextWrap()
                    .Locale(AppHelper.CultureLanguage)
                    .Query(query)
                    .ShowColumnChooser(true)
                    .ActionBegin("actionBegin_" + Model.ValueId + "_LookupGrid")
                    .ActionFailure("actionFailure_" + Model.ValueId + "_LookupGrid")
                    .Load("load_" + Model.ValueId + "_LookupGrid")
                    .RowSelected("rowSelected_" + Model.ValueId + "_LookupGrid")
                    .ToolbarClick("toolbarClick_" + Model.ValueId + "_LookupGrid")
                    .Columns(column =>
                    {
                        column.Field("ActivityId")
                            .Type("string")
                            .EditType("stringEdit")
                            .HeaderText(ActivityRoleResources.PropertyActivityId)
                            .IsPrimaryKey(true)
                            .Visible(profile.IsGridVisibleFor("ActivityId"))
                            .Width(profile.GridWidthFor("ActivityId"))
                            .Add();
                        column.Field("ActivityLookupText")
                            .AllowEditing(false)
                            .Type("string")
                            .HeaderText(ActivityResources.EntitySingular)
                            .Visible(profile.IsGridVisibleFor("ActivityLookupText"))
                            .Width(profile.GridWidthFor("ActivityLookupText"))
                            .Add();
                        column.Field("RoleName")
                            .Type("string")
                            .EditType("stringEdit")
                            .HeaderText(ActivityRoleResources.PropertyRoleName)
                            .IsPrimaryKey(true)
                            .Visible(profile.IsGridVisibleFor("RoleName"))
                            .Width(profile.GridWidthFor("RoleName"))
                            .Add();
                        column.Field("Operations")
                            .Type("string")
                            .EditType("stringEdit")
                            .HeaderText(ActivityRoleResources.PropertyOperations)
                            .Visible(profile.IsGridVisibleFor("Operations"))
                            .Width(profile.GridWidthFor("Operations"))
                            .Add();
                    })
                    .FilterSettings(filter => filter
                        .EnableCaseSensitivity(false)
                        .Type(FilterType.Excel)
                    )
                    .PageSettings(page => page
                        .PageSize(AppDefaults.SyncfusionRecordsByPage)
                    )
                    .TextWrapSettings(wrap => wrap
                        .WrapMode(WrapMode.Content)
                    )
                    .Render()
                )

                <div class="z-lookupButtons">
                    @Html.ZImage("Button_Clear", "btn z-buttonClear", PresentationResources.Clear, "clear_" + Model.ValueId + "()")
                    @Html.ZImage("Button_Create", "btn z-buttonCreate", PresentationResources.Create, "create_" + Model.ValueId + "()")
                </div>

            </div>
        </div>
    </div>
</div>

<script>
    zSyncfusionLookup("@(Model.ValueId)_LookupModal");

    $(function () {
        try {
            zSyncfusionLookupReady("@(Model.ValueId)_LookupModal");

            var model = @Html.Raw(JsonConvert.SerializeObject(Model));
            var profile = @Html.Raw(JsonConvert.SerializeObject(profile));

            $("#@(Model.ValueId)").hide();

            $("#@(Model.ValueId)_LookupButton").click(function () {
                zGridDataSource("@(Model.ValueId)_LookupGrid", "@Url.Action("DataSource", "ActivityRole")");

                $("#@(Model.ValueId)_LookupGrid_Toolbar").removeAttr("data-content");

                $("#@(Model.ValueId)_LookupModal").modal("show");
            });

            $("#@(Model.ValueId)_LookupText").prop("readonly", true);
            $("#@(Model.ValueId)_LookupText").val(model.Text.toLocaleString("@CultureInfo.CurrentCulture.Name"));

            $("#@(Model.ValueId)_LookupModal").modal("hide");

            $("#@(Model.ValueId)_LookupGrid_Toolbar").removeAttr("data-content");
        } catch (exception) {
            zAlert(zExceptionMessage("@CSHTML", "function", exception));
        }
    });

    function actionBegin_@(Model.ValueId)_LookupGrid(args) {
        try {
            switch (args.requestType) {
                case "filterchoicerequest":
                    args.filterChoiceCount = @AppDefaults.SyncfusionRecordsForFiltering; 
                    break;
            }
        } catch (exception) {
            zAlert(zExceptionMessage("@CSHTML", "actionBegin_@(Model.ValueId)_LookupGrid", exception));
        }
    }

    function actionFailure_@(Model.ValueId)_LookupGrid(args) {
        try {
            zAlert(args.error.error.responseText);
        } catch (exception) {
            zAlert(zExceptionMessage("@CSHTML", "actionFailure_@(Model.ValueId)_LookupGrid", exception));
        }
    }

    function clear_@(Model.ValueId)() {
        try {
            $("#@(Model.ValueId)").val("").change();

            $("#@(Model.ValueId)_LookupText").val("").change();

            $("#@(Model.ValueId)_LookupModal").modal("hide");
        } catch (exception) {
            zAlert(zExceptionMessage("@CSHTML", "clear_@(Model.ValueId)", exception));
        }
    }

    function create_@(Model.ValueId)() {
        try {
            window.open("@(Url.Action("Index", "ActivityRole", new { Operation = "create" }, Request.Url.Scheme))");
        } catch (exception) {
            zAlert(zExceptionMessage("@CSHTML", "create_@(Model.ValueId)", exception));
        }
    }

    function load_@(Model.ValueId)_LookupGrid(args) {
        try {
            var model = @Html.Raw(JsonConvert.SerializeObject(Model));
            var profile = @Html.Raw(JsonConvert.SerializeObject(profile));
            zOnLookupView(model, profile);
        } catch (exception) {
            zAlert(zExceptionMessage("@CSHTML", "load_@(Model.ValueId)_LookupGrid", exception));
        }
    }

    function rowSelected_@(Model.ValueId)_LookupGrid(args) {
        try {
            var data = this.model.currentViewData[args.rowIndex];

            $("#@(Model.ValueId)").val(data.ActivityId).change();

            $("#@(Model.ValueId)_LookupText").val(data.LookupText).change();

            var model = @Html.Raw(JsonConvert.SerializeObject(Model));
            var culture = "@System.Globalization.CultureInfo.CurrentCulture.Name";
            zLookupElements(data, model.Elements, culture);

            $("#@(Model.ValueId)_LookupModal").modal("hide");
        } catch (exception) {
            zAlert(zExceptionMessage("@CSHTML", "rowSelected_@(Model.ValueId)_LookupGrid", exception));
        }
    }

    function toolbarClick_@(Model.ValueId)_LookupGrid(args) {
        try {
            var operation = args.item.id.replace(@Model.ValueId + "_LookupGrid", "").toLowerCase();

            if (operation == "refresh") {
                this.refresh();
            }
        } catch (exception) {
            zAlert(zExceptionMessage("@CSHTML", "toolbarClick_@(Model.ValueId)_LookupGrid", exception));
        }
    }
</script>

@Html.EJS().ScriptManager()
